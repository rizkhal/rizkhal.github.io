<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rizkhal Lamaau</title>
    <link href="https://rizkhal.github.io" />
    <link type="application/atom+xml" rel="self" href="https://rizkhal.github.io/blog/feed.atom" />
    <updated>2020-06-05T08:06:04+08:00</updated>
    <id>https://rizkhal.github.io/blog/feed.atom</id>
    <author>
        <name>Rizkhal</name>
    </author>
                <entry>
    <id>https://rizkhal.github.io/blog/make-custom-class-using-laravel-command</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/make-custom-class-using-laravel-command" />
    <title>Make custom class using laravel command</title>
    <published>2020-06-04T08:00:00+08:00</published>
    <updated>2020-06-04T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">Say you want to apply a repository pattern in your laravel application, and need a lot of class interfaces that function as layers to make the code more compact in controller.
Will be very wasteful of time, effort and boring if you create and type a......</summary>
    <content type="html"><![CDATA[
        <p>Say you want to apply a repository pattern in your laravel application, and need a lot of class interfaces that function as layers to make the code more compact in controller.
Will be very wasteful of time, effort and boring if you create and type a class whose contents are almost the same.
Therefore, let's make a simple command to create a class interface quickly.</p>

<p>Create command class with</p>

<pre><code class="language-bash">php artisan make:command RepositoryCommand
</code></pre>

<p>Then create a stubs file in <code>app/Console/repository.stub</code> and make like this</p>

<pre><code class="language-php">&lt;?php

namespace {{ namespace }}

interface {{ class }}
{
    /**
     * List all of data
     * 
     * @return collection
     */
    public function all();

    /**
     * Save new data
     * 
     * @param  array  $request
     * @return bool
     */
    public function save(array $request);

    /**
     * Update data where id
     * 
     * @param  string $id
     * @param  array  $request
     * @return bool
     */
    public function update(string $id, array $request);

    /**
     * Delete data
     * 
     * @param  string $id
     * @return bool
     */
    public function delete(string $id);
}
</code></pre>

<p>After that, let's start by creating a command to create this file with dynamic classes and namespaces</p>

<p>Open your <code>RepositoryCommand.php</code> and make like this</p>

<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Console\Commands;

use Illuminate\Console\Command;

class RepositoryCommand extends Command
{
    protected $signature = 'make:repository {name}';

    protected $description = 'Create a new repository class';

    /**
     * Create a new controller creator command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the command.
     *
     * @return void
     */
    public function handle(): void
    {
        $name = $this-&gt;getArgument('name');

        $this-&gt;putContents(app_path($name), $this-&gt;buildClass($name));

        $this-&gt;info("Repository created successfully.");
    }

    /**
     * Build class
     * 
     * @param  string $name
     * @return string
     */
    protected function buildClass(string $name): string
    {
        $stub = $this-&gt;getStub();

        return $this-&gt;replaceNamespace($stub)-&gt;replaceClass($stub, $name);
    }

    /**
     * Replace class in stub file
     * 
     * @param  string $stub
     * @param  string $name
     * @return string
     */
    protected function replaceClass(string $stub, string $name): string
    {
        $class = str_replace($this-&gt;getNamespace($name).'\\', '', $name);

        return str_replace(['{{ class }}', '{{class}}'], $class, $stub);
    }

    /**
     * Replace namespace
     * 
     * @param  string &amp;$stub
     * @return self
     */
    protected function replaceNamespace(&amp;$stub): self
    {
        $namespace = str_replace('\\', '', $this-&gt;laravel-&gt;getNamespace());

        $stub = str_replace(['{{ namespace }}', '{{namespace}}'], $namespace, $stub);

        return $this;
    }

    /**
     * Get the full namespace for a given class, without the class name.
     *
     * @param  string  $name
     * @return string
     */
    protected function getNamespace(string $name): string
    {
        return trim(implode('\\', array_slice(explode('\\', $name), 0, 0)), '\\');
    }

    /**
     * Get argument from console
     * 
     * @return string
     */
    protected function getArgument($name): string
    {
        return trim($this-&gt;argument($name));
    }

    /**
     * Put contents
     * 
     * @param  string $filename
     * @param  string $resources
     * @return void
     */
    protected function putContents(string $filename, string $resources): void
    {
        file_put_contents("{$filename}.php", $resources);
    }

    /**
     * Get stubs
     * 
     * @return string
     */
    protected function getStub(): string
    {
        return file_get_contents(app_path('Console/repository.stub'));
    }
}
</code></pre>

<p>After that check the command that we have made with <code>php artisan list</code>, if nothing is wrong, then you will see the command <code>make:repository</code>.</p>

<p>Now you can try with <code>php artisan make:repository FooRepository</code> and see your class interface at <code>app/FooRepository.php</code></p>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/spread-operator-to-rid-of-duplicate-value</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/spread-operator-to-rid-of-duplicate-value" />
    <title>Spread operator to get rid of duplicate value</title>
    <published>2020-05-27T08:00:00+08:00</published>
    <updated>2020-05-27T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">Distribute the operator to eliminate duplicate values, with javascript we only need to write one line of code like this:...</summary>
    <content type="html"><![CDATA[
        <p>Distribute the operator to eliminate duplicate values, with javascript we only need to write one line of code like this:</p>

<pre><code class="language-javascript">const array = [1, 2, 3, 2, 3, 1];
[...new Set(array)]; // spread operator to get rid of duplicate value
// result = [1, 2, 3];
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/useful-git-commands</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/useful-git-commands" />
    <title>Useful git commands</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel....</summary>
    <content type="html"><![CDATA[
        <p>By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel.</p>

<pre><code class="language-plaintext">* push into remote branch
$ git push remote-name branch-name

* push into remote master branch from local development branch
$ git push remote-name dev:master

* delete remote branch
$ git push remote-name --delete branch-name or $ git push remote-name :branch-name

* delete local and remote branch
$ git remote-name -d -r

* check commit changed
$ git diff [commit1] [commit2] or [branch-name1] [branch-name2]

* remove untracked file
$ git clean -n

* reset to spesific head
* option: --hard, --mixed or only reset
$ git reset --soft HEAD~number_of_commits

* show pretty graph on terminal
* make your alias for simple command
$ git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/regular-expression-filter-certain-character</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/regular-expression-filter-certain-character" />
    <title>Regular expression certain character</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">What would a regex string look like if you were provided a random string such as :



and I wanted to filter out certain characters such as 2, b, j, d, g, k and 8?

So in this case, the function would return &lt;code&gt;2bjd8&lt;/code&gt;.





To get all the......</summary>
    <content type="html"><![CDATA[
        <p>What would a regex string look like if you were provided a random string such as :</p>

<pre><code class="language-javascript">let random = "u23ntfb23nnfj3mimowmndnwm8";
</code></pre>

<p>and I wanted to filter out certain characters such as 2, b, j, d, g, k and 8?</p>

<p>So in this case, the function would return <code>2bjd8</code>.</p>

<!-- ### Lets write code -->

<pre><code class="language-javascript">var random = "u23ntfb23nnfj3mimowmndnwm8";
var regexp = /[2bjd8]+/g;

alert((random.match(regexp) || []).join(''));
</code></pre>

<p>To get all the matches use <code>String.prototype.match()</code> with your Regex.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/javascript-nested-function</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/javascript-nested-function" />
    <title>Javascript nested functions</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">A function is called nested when it is created inside another function, it is easily possible to do this with javascript. We can use it to organize our code, like this:



Here the nested function &lt;code&gt;getFullName()&lt;/code&gt; is made for convenience. It......</summary>
    <content type="html"><![CDATA[
        <p>A function is called <strong>nested</strong> when it is created inside another function, it is easily possible to do this with javascript. We can use it to organize our code, like this:</p>

<pre><code class="language-javascript">function sayHiBye(firstName, lastName) {

  // helper nested function to use below
  function getFullName() {
    return firstName + " " + lastName;
  }

  alert( "Hello, " + getFullName() );
  alert( "Bye, " + getFullName() );

}
</code></pre>

<p>Here the nested function <code>getFullName()</code> is made for convenience. It can access the outer variables and so can return the full name. Nested functions are quite common in javascript.</p>
    ]]></content>
</entry>
    </feed>
