<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Rizkhal Lamaau</title>
    <link href="https://rizkhal.github.io" />
    <link type="application/atom+xml" rel="self" href="https://rizkhal.github.io/blog/feed.atom" />
    <updated>2020-05-27T19:39:54+08:00</updated>
    <id>https://rizkhal.github.io/blog/feed.atom</id>
    <author>
        <name>Rizkhal</name>
    </author>
                <entry>
    <id>https://rizkhal.github.io/blog/spread-operator-to-rid-of-duplicate-value</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/spread-operator-to-rid-of-duplicate-value" />
    <title>Spread operator to get rid of duplicate value</title>
    <published>2020-05-27T08:00:00+08:00</published>
    <updated>2020-05-27T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">Distribute the operator to eliminate duplicate values, with javascript we only need to write one line of code like this:...</summary>
    <content type="html"><![CDATA[
        <p>Distribute the operator to eliminate duplicate values, with javascript we only need to write one line of code like this:</p>

<pre><code class="language-javascript">const array = [1, 2, 3, 2, 3, 1];
[...new Set(array)]; // spread operator to get rid of duplicate value
// result = [1, 2, 3];
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/useful-git-commands</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/useful-git-commands" />
    <title>Useful git commands</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel....</summary>
    <content type="html"><![CDATA[
        <p>By far, the most widely used modern version control system in the world today is Git. Git is a mature, actively maintained open source project originally developed in 2005 by Linus Torvalds, the famous creator of the Linux operating system kernel.</p>

<pre><code class="language-plaintext">* push into remote branch
$ git push remote-name branch-name

* push into remote master branch from local development branch
$ git push remote-name dev:master

* delete remote branch
$ git push remote-name --delete branch-name or $ git push remote-name :branch-name

* delete local and remote branch
$ git remote-name -d -r

* check commit changed
$ git diff [commit1] [commit2] or [branch-name1] [branch-name2]

* remove untracked file
$ git clean -n

* reset to spesific head
* option: --hard, --mixed or only reset
$ git reset --soft HEAD~number_of_commits
</code></pre>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/regular-expression-filter-certain-character</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/regular-expression-filter-certain-character" />
    <title>Regular expression certain character</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">What would a regex string look like if you were provided a random string such as :



and I wanted to filter out certain characters such as 2, b, j, d, g, k and 8?

So in this case, the function would return &lt;code&gt;2bjd8&lt;/code&gt;.





To get all the......</summary>
    <content type="html"><![CDATA[
        <p>What would a regex string look like if you were provided a random string such as :</p>

<pre><code class="language-javascript">let random = "u23ntfb23nnfj3mimowmndnwm8";
</code></pre>

<p>and I wanted to filter out certain characters such as 2, b, j, d, g, k and 8?</p>

<p>So in this case, the function would return <code>2bjd8</code>.</p>

<!-- ### Lets write code -->

<pre><code class="language-javascript">var random = "u23ntfb23nnfj3mimowmndnwm8";
var regexp = /[2bjd8]+/g;

alert((random.match(regexp) || []).join(''));
</code></pre>

<p>To get all the matches use <code>String.prototype.match()</code> with your Regex.</p>
    ]]></content>
</entry>
            <entry>
    <id>https://rizkhal.github.io/blog/javascript-nested-function</id>
    <link type="text/html" rel="alternate" href="https://rizkhal.github.io/blog/javascript-nested-function" />
    <title>Javascript nested functions</title>
    <published>2020-05-26T08:00:00+08:00</published>
    <updated>2020-05-26T08:00:00+08:00</updated>
    <author>
        <name>Rizkhal</name>
    </author>
    <summary type="html">A function is called nested when it is created inside another function, it is easily possible to do this with javascript. We can use it to organize our code, like this:



Here the nested function &lt;code&gt;getFullName()&lt;/code&gt; is made for convenience. It......</summary>
    <content type="html"><![CDATA[
        <p>A function is called <strong>nested</strong> when it is created inside another function, it is easily possible to do this with javascript. We can use it to organize our code, like this:</p>

<pre><code class="language-javascript">function sayHiBye(firstName, lastName) {

  // helper nested function to use below
  function getFullName() {
    return firstName + " " + lastName;
  }

  alert( "Hello, " + getFullName() );
  alert( "Bye, " + getFullName() );

}
</code></pre>

<p>Here the nested function <code>getFullName()</code> is made for convenience. It can access the outer variables and so can return the full name. Nested functions are quite common in javascript.</p>
    ]]></content>
</entry>
    </feed>
